// Distributed under the MIT License.
// See LICENSE.txt for details.

#include "Framework/TestingFramework.hpp"

#include <cstddef>

#include "DataStructures/SliceVariables.hpp"
#include "DataStructures/Tensor/Tensor.hpp"
#include "DataStructures/Variables.hpp"
#include "Domain/Creators/Brick.hpp"
#include "Domain/Creators/Interval.hpp"
#include "Domain/Creators/Rectangle.hpp"
#include "Elliptic/Systems/Poisson/FirstOrderSystem.hpp"
#include "Helpers/Elliptic/Systems/Poisson/DgSchemes.hpp"
#include "Utilities/Gsl.hpp"
#include "Utilities/TMPL.hpp"

SPECTRE_TEST_CASE("Unit.Elliptic.DG.TestHelpers", "[Unit][Elliptic]") {
  /*
   * Makes the following assumptions:
   * - First-order Poisson system
   * - Strong first-order internal penalty DG scheme
   * - Diagonal mass matrix approximation ("mass-lumping")
   * - The `penalty_parameter` is used directly as the prefactor to the penalty
   * term in the numerical flux.
   * - The elements are ordered by block first, and then by segment index of
   * each dimension in turn.
   * - Within each element this is the data layout:
   *   - The primal field precedes the auxiliary field
   *   - Tensor components are ordered first by index, then by dimension (as one
   *   would expect)
   *   - Grid points for each component are stored in column-major format
   *   (corresponding to the order called 'F' in Numpy).
   */
  {
    INFO("1D");
    const domain::creators::Interval domain_creator{
        {{-2.}}, {{2.}}, {{false}}, {{1}}, {{3}}};
    const double penalty_parameter = 6.75;
    CAPTURE(penalty_parameter);
    const DenseMatrix<double> expected_operator_matrix{
        {36.0, 6.0, -1.5, -1.5, -2.0, 0.5, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0},
        {-0.0, -0.0, -0.0, 0.5, -0.0, -0.5, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0},
        {-0.75, 3.0, 18.0, -0.5, 2.0, 1.5, -18.0, -3.0, 0.75, -0.0, -0.0, -0.0},
        {-1.5, -2.0, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.5, 0.0, -0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {-0.5, 2.0, 0.0, 0.0, 0.0, 1.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.75, -3.0, -18.0, -0.0, -0.0, -0.0, 18.0, 3.0, -0.75, -1.5, -2.0,
         0.5},
        {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.5, -0.0, -0.5},
        {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.5, 6.0, 36.0, -0.5, 2.0, 1.5},
        {0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, -2.0, 0.5, 1.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, -0.5, 0.0, 1.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, 2.0, 1.5, 0.0, 0.0, 1.0}};
    const auto operator_matrix =
        TestHelpers::Poisson::strong_first_order_dg_operator_matrix(
            domain_creator, penalty_parameter);
    CHECK_MATRIX_APPROX(operator_matrix, expected_operator_matrix);
  }
  {
    INFO("2D");
    const domain::creators::Rectangle domain_creator{
        {{-2., -2.}}, {{2., 2.}}, {{false, false}}, {{1, 1}}, {{3, 3}}};
    const double penalty_parameter = 6.75;
    CAPTURE(penalty_parameter);
    const auto operator_matrix =
        TestHelpers::Poisson::strong_first_order_dg_operator_matrix(
            domain_creator, penalty_parameter);
    std::vector<double> expected_sum_over_each_row{
        75.0, 37.5, 40.5, 37.5, 0.0,  3.0,  40.5, 3.0,  6.0,  -2.0, 1.0,  1.0,
        -2.0, 1.0,  1.0,  -2.0, 1.0,  1.0,  -2.0, -2.0, -2.0, 1.0,  1.0,  1.0,
        1.0,  1.0,  1.0,  34.5, -3.0, 0.0,  37.5, 0.0,  3.0,  81.0, 43.5, 46.5,
        -2.0, 1.0,  1.0,  -2.0, 1.0,  1.0,  -2.0, 1.0,  1.0,  1.0,  1.0,  1.0,
        1.0,  1.0,  1.0,  4.0,  4.0,  4.0,  34.5, 37.5, 81.0, -3.0, 0.0,  43.5,
        0.0,  3.0,  46.5, 1.0,  1.0,  4.0,  1.0,  1.0,  4.0,  1.0,  1.0,  4.0,
        -2.0, -2.0, -2.0, 1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  -6.0, -3.0, 40.5,
        -3.0, 0.0,  43.5, 40.5, 43.5, 87.0, 1.0,  1.0,  4.0,  1.0,  1.0,  4.0,
        1.0,  1.0,  4.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  4.0,  4.0,  4.0};
    for (size_t row = 0; row < operator_matrix.rows(); row++) {
      double sum_over_row = 0;
      for (size_t col = 0; col < operator_matrix.columns(); col++) {
        sum_over_row += operator_matrix(row, col);
      }
      CAPTURE(row);
      CHECK(sum_over_row == expected_sum_over_each_row.at(row));
    }
  }
  {
    INFO("3D");
    const domain::creators::Brick domain_creator{{{-2., -2., -2.}},
                                                     {{2., 2., 2.}},
                                                     {{false, false, false}},
                                                     {{1, 1, 1}},
                                                     {{3, 3, 3}}};
    const double penalty_parameter = 6.75;
    CAPTURE(penalty_parameter);
    const auto operator_matrix =
        TestHelpers::Poisson::strong_first_order_dg_operator_matrix(
            domain_creator, penalty_parameter);
    std::vector<double> expected_sum_over_each_row{
        112.5, 75.0,  78.0,  75.0, 37.5, 40.5,  78.0, 40.5,  43.5, 75.0, 37.5,
        40.5,  37.5,  0.0,   3.0,  40.5, 3.0,   6.0,  78.0,  40.5, 43.5, 40.5,
        3.0,   6.0,   43.5,  6.0,  9.0,  -2.0,  1.0,  1.0,   -2.0, 1.0,  1.0,
        -2.0,  1.0,   1.0,   -2.0, 1.0,  1.0,   -2.0, 1.0,   1.0,  -2.0, 1.0,
        1.0,   -2.0,  1.0,   1.0,  -2.0, 1.0,   1.0,  -2.0,  1.0,  1.0,  -2.0,
        -2.0,  -2.0,  1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   -2.0, -2.0, -2.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   -2.0, -2.0,  -2.0, 1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  -2.0, -2.0,  -2.0, -2.0,  -2.0, -2.0, -2.0,
        -2.0,  -2.0,  1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  72.0, 34.5,
        37.5,  34.5,  -3.0,  0.0,  37.5, 0.0,   3.0,  75.0,  37.5, 40.5, 37.5,
        0.0,   3.0,   40.5,  3.0,  6.0,  118.5, 81.0, 84.0,  81.0, 43.5, 46.5,
        84.0,  46.5,  49.5,  -2.0, 1.0,  1.0,   -2.0, 1.0,   1.0,  -2.0, 1.0,
        1.0,   -2.0,  1.0,   1.0,  -2.0, 1.0,   1.0,  -2.0,  1.0,  1.0,  -2.0,
        1.0,   1.0,   -2.0,  1.0,  1.0,  -2.0,  1.0,  1.0,   -2.0, -2.0, -2.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   -2.0, -2.0,  -2.0, 1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  -2.0, -2.0,  -2.0, 1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  4.0,  4.0,
        4.0,   4.0,   4.0,   4.0,  4.0,  4.0,   4.0,  72.0,  34.5, 37.5, 75.0,
        37.5,  40.5,  118.5, 81.0, 84.0, 34.5,  -3.0, 0.0,   37.5, 0.0,  3.0,
        81.0,  43.5,  46.5,  37.5, 0.0,  3.0,   40.5, 3.0,   6.0,  84.0, 46.5,
        49.5,  -2.0,  1.0,   1.0,  -2.0, 1.0,   1.0,  -2.0,  1.0,  1.0,  -2.0,
        1.0,   1.0,   -2.0,  1.0,  1.0,  -2.0,  1.0,  1.0,   -2.0, 1.0,  1.0,
        -2.0,  1.0,   1.0,   -2.0, 1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   4.0,   4.0,   4.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  4.0,
        4.0,   4.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   4.0,  4.0,  4.0,
        -2.0,  -2.0,  -2.0,  -2.0, -2.0, -2.0,  -2.0, -2.0,  -2.0, 1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  31.5,  -6.0, -3.0,  34.5, -3.0, 0.0,
        78.0,  40.5,  43.5,  34.5, -3.0, 0.0,   37.5, 0.0,   3.0,  81.0, 43.5,
        46.5,  78.0,  40.5,  43.5, 81.0, 43.5,  46.5, 124.5, 87.0, 90.0, -2.0,
        1.0,   1.0,   -2.0,  1.0,  1.0,  -2.0,  1.0,  1.0,   -2.0, 1.0,  1.0,
        -2.0,  1.0,   1.0,   -2.0, 1.0,  1.0,   -2.0, 1.0,   1.0,  -2.0, 1.0,
        1.0,   -2.0,  1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  4.0,
        4.0,   4.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   4.0,  4.0,  4.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   4.0,  4.0,   4.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  4.0,   4.0,  4.0,   4.0,  4.0,  4.0,
        4.0,   4.0,   4.0,   72.0, 75.0, 118.5, 34.5, 37.5,  81.0, 37.5, 40.5,
        84.0,  34.5,  37.5,  81.0, -3.0, 0.0,   43.5, 0.0,   3.0,  46.5, 37.5,
        40.5,  84.0,  0.0,   3.0,  46.5, 3.0,   6.0,  49.5,  1.0,  1.0,  4.0,
        1.0,   1.0,   4.0,   1.0,  1.0,  4.0,   1.0,  1.0,   4.0,  1.0,  1.0,
        4.0,   1.0,   1.0,   4.0,  1.0,  1.0,   4.0,  1.0,   1.0,  4.0,  1.0,
        1.0,   4.0,   -2.0,  -2.0, -2.0, 1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        -2.0,  -2.0,  -2.0,  1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  -2.0, -2.0,
        -2.0,  1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  -2.0,  -2.0, -2.0, -2.0,
        -2.0,  -2.0,  -2.0,  -2.0, -2.0, 1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   31.5,  34.5,  78.0, -6.0, -3.0,  40.5, -3.0,  0.0,  43.5, 34.5,
        37.5,  81.0,  -3.0,  0.0,  43.5, 0.0,   3.0,  46.5,  78.0, 81.0, 124.5,
        40.5,  43.5,  87.0,  43.5, 46.5, 90.0,  1.0,  1.0,   4.0,  1.0,  1.0,
        4.0,   1.0,   1.0,   4.0,  1.0,  1.0,   4.0,  1.0,   1.0,  4.0,  1.0,
        1.0,   4.0,   1.0,   1.0,  4.0,  1.0,   1.0,  4.0,   1.0,  1.0,  4.0,
        -2.0,  -2.0,  -2.0,  1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  -2.0, -2.0,
        -2.0,  1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  -2.0,  -2.0, -2.0, 1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   4.0,   4.0,   4.0,  4.0,  4.0,   4.0,  4.0,   4.0,  4.0,  31.5,
        34.5,  78.0,  34.5,  37.5, 81.0, 78.0,  81.0, 124.5, -6.0, -3.0, 40.5,
        -3.0,  0.0,   43.5,  40.5, 43.5, 87.0,  -3.0, 0.0,   43.5, 0.0,  3.0,
        46.5,  43.5,  46.5,  90.0, 1.0,  1.0,   4.0,  1.0,   1.0,  4.0,  1.0,
        1.0,   4.0,   1.0,   1.0,  4.0,  1.0,   1.0,  4.0,   1.0,  1.0,  4.0,
        1.0,   1.0,   4.0,   1.0,  1.0,  4.0,   1.0,  1.0,   4.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  4.0,  4.0,   4.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   4.0,   4.0,  4.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        4.0,   4.0,   4.0,   -2.0, -2.0, -2.0,  -2.0, -2.0,  -2.0, -2.0, -2.0,
        -2.0,  1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   -9.0, -6.0, 37.5,
        -6.0,  -3.0,  40.5,  37.5, 40.5, 84.0,  -6.0, -3.0,  40.5, -3.0, 0.0,
        43.5,  40.5,  43.5,  87.0, 37.5, 40.5,  84.0, 40.5,  43.5, 87.0, 84.0,
        87.0,  130.5, 1.0,   1.0,  4.0,  1.0,   1.0,  4.0,   1.0,  1.0,  4.0,
        1.0,   1.0,   4.0,   1.0,  1.0,  4.0,   1.0,  1.0,   4.0,  1.0,  1.0,
        4.0,   1.0,   1.0,   4.0,  1.0,  1.0,   4.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   4.0,   4.0,  4.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        4.0,   4.0,   4.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  4.0,  4.0,
        4.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   4.0,  4.0,  4.0,
        4.0,   4.0,   4.0,   4.0,  4.0,  4.0};
    for (size_t row = 0; row < operator_matrix.rows(); row++) {
      double sum_over_row = 0;
      for (size_t col = 0; col < operator_matrix.columns(); col++) {
        sum_over_row += operator_matrix(row, col);
      }
      CAPTURE(row);
      CHECK(sum_over_row == expected_sum_over_each_row.at(row));
    }
  }
}
