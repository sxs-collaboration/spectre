// Distributed under the MIT License.
// See LICENSE.txt for details.

module GlobalCache {
  include "optional";
  include "Parallel/ParallelComponentHelpers.hpp";
  include "Utilities/TaggedTuple.hpp";
  include "Parallel/Main.decl.h";
  namespace Parallel {

  template <typename Metavariables>
  group[migratable] MutableGlobalCache {
    entry MutableGlobalCache(
        tuples::tagged_tuple_from_typelist<
            get_mutable_global_cache_tags<Metavariables>>&);
    template <typename GlobalCacheTag, typename Function, typename... Args>
    entry void mutate(std::tuple<Args...> & args);
  }

  template <typename Metavariables>
  nodegroup[migratable] GlobalCache {
    entry GlobalCache(tuples::tagged_tuple_from_typelist<
                          get_const_global_cache_tags<Metavariables>>&,
                      CProxy_MutableGlobalCache<Metavariables>&,
                      std::optional<CProxy_Main<Metavariables>>);
    entry void set_parallel_components(
        tuples::tagged_tuple_from_typelist<tmpl::transform<
            typename Metavariables::component_list,
            tmpl::bind<tmpl::type_,
                       tmpl::bind<Parallel::proxy_from_parallel_component,
                                  tmpl::_1>>>>,
        const CkCallback&);
    template <typename GlobalCacheTag, typename Function, typename... Args>
    entry void mutate(std::tuple<Args...> & args);

    entry void overlay_cache_data(
        tuples::tagged_tuple_from_typelist<
            Parallel::get_overlayable_option_list<Metavariables>>&);
  }
  }
}
